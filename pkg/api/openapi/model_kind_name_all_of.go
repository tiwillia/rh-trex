/*
rh-trex Service API

rh-trex Service API

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the KindNameAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KindNameAllOf{}

// KindNameAllOf struct for KindNameAllOf
type KindNameAllOf struct {
	Foo *string `json:"foo,omitempty"`
}

// NewKindNameAllOf instantiates a new KindNameAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKindNameAllOf() *KindNameAllOf {
	this := KindNameAllOf{}
	return &this
}

// NewKindNameAllOfWithDefaults instantiates a new KindNameAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKindNameAllOfWithDefaults() *KindNameAllOf {
	this := KindNameAllOf{}
	return &this
}

// GetFoo returns the Foo field value if set, zero value otherwise.
func (o *KindNameAllOf) GetFoo() string {
	if o == nil || IsNil(o.Foo) {
		var ret string
		return ret
	}
	return *o.Foo
}

// GetFooOk returns a tuple with the Foo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KindNameAllOf) GetFooOk() (*string, bool) {
	if o == nil || IsNil(o.Foo) {
		return nil, false
	}
	return o.Foo, true
}

// HasFoo returns a boolean if a field has been set.
func (o *KindNameAllOf) HasFoo() bool {
	if o != nil && !IsNil(o.Foo) {
		return true
	}

	return false
}

// SetFoo gets a reference to the given string and assigns it to the Foo field.
func (o *KindNameAllOf) SetFoo(v string) {
	o.Foo = &v
}

func (o KindNameAllOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KindNameAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Foo) {
		toSerialize["foo"] = o.Foo
	}
	return toSerialize, nil
}

type NullableKindNameAllOf struct {
	value *KindNameAllOf
	isSet bool
}

func (v NullableKindNameAllOf) Get() *KindNameAllOf {
	return v.value
}

func (v *NullableKindNameAllOf) Set(val *KindNameAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableKindNameAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableKindNameAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKindNameAllOf(val *KindNameAllOf) *NullableKindNameAllOf {
	return &NullableKindNameAllOf{value: val, isSet: true}
}

func (v NullableKindNameAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKindNameAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
