// Code generated for package openapi by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../openapi/openapi.kindnames.yaml
// ../../openapi/openapi.yaml
package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _openapiKindnamesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6f\x1b\x37\x12\x7f\xf7\xa7\x18\x20\x77\x50\x12\xc8\x96\x73\x97\x7b\x38\x21\x0e\xe0\x24\x4e\x9b\xd6\x91\x53\xdb\x69\x1f\x8a\xc2\xa6\xc8\x59\x2d\xe3\x5d\x72\xc3\x21\x6d\xad\xdb\x7e\xf7\x82\xa4\xfe\xec\x4a\x6b\xfd\x49\x2c\x54\x29\xac\x17\x4b\xe4\xcc\x70\x7e\x9c\x99\x1f\x67\xb9\x2e\x98\x4d\xa9\xbb\x03\xf0\x08\x7a\x47\xbf\xc0\x51\xef\xcd\x87\x93\x77\xbd\x73\x38\x3b\x3f\x3c\x3d\xdf\x01\xe8\xb0\x42\x76\x4c\xba\x6b\x0d\x0e\x3b\xd7\xcf\x3a\x57\x52\x09\xc5\x72\x6c\xd2\x39\xea\xbd\xd9\x01\x00\x18\xa0\xed\x86\x2f\x00\xe4\xf2\x9c\x99\xb2\x0b\xa7\x68\x9d\x51\x04\x0c\x32\x49\x16\x74\x02\x13\x4b\x63\x51\xe4\xce\x48\x5b\x8e\x55\x01\x76\xe1\x15\x32\x83\xa6\x0b\xbf\xfe\x36\x1a\x34\x48\x85\x56\x14\x97\x8f\x9f\xd6\x7f\xf6\xf7\x5b\xd3\x9f\x00\x02\x89\x1b\x59\x58\xa9\x55\x17\x0e\xe1\x87\xb3\x93\x1e\x30\x63\x58\x59\x5d\x15\x74\xff\x13\x72\x4b\x15\x3d\xae\x95\x45\x65\xab\xa6\x00\x58\x51\x64\x92\x33\x6f\xac\xf3\x89\xb4\xaa\xcf\x02\x10\x4f\x31\x67\xb3\xa3\x00\xff\x32\x98\x74\xa1\xf5\xa8\xc3\x75\x5e\x68\x85\xca\x52\x27\xca\x52\xe7\x47\xa9\x44\x8f\xe5\x78\x2c\xc9\xb6\xa6\x38\x9e\xef\x3f\x5b\x80\xc3\xd9\x14\xac\xbe\x42\x05\x92\x40\xaa\x6b\x96\x49\xb1\x61\xe7\x75\x81\x8a\x15\x72\xaf\x64\x79\xd6\x08\xe4\xc8\x18\x6d\x6a\x08\xfe\x7b\x37\x82\x8f\x8a\x39\x9b\x6a\x23\x6f\x51\x80\xd5\x50\xa0\x49\xb4\xc9\x41\x17\x68\x82\x8b\xdb\x86\xe6\x7f\x8b\xf2\xea\xa3\xc2\x61\x81\xdc\xa2\x00\xf4\x7a\xa0\x39\x77\xc6\xe0\x76\xc5\xa4\x60\x86\xe5\x68\xd1\x50\xb5\xaa\x9a\x72\x73\x2a\xd9\x29\xd8\x00\x5b\xab\x8b\x93\xbc\x5d\x4b\x1c\x99\xe1\xe9\x1a\x0a\xda\x08\x34\xaf\xca\x35\x34\x12\x89\x99\xa0\xa8\x50\x68\x9a\x27\xa3\xd7\x06\x99\x45\x60\xa0\xf0\x66\xc2\x08\xeb\xd1\xd0\x67\x87\x64\x5f\x69\x51\x91\xab\xe5\xc7\xb8\xc6\x41\x30\xcb\x26\x22\x5e\x4f\x1a\x14\x5d\xb0\xc6\xe1\xce\x82\x44\x59\x9c\x26\xcd\x49\xb2\x0a\xe7\xb4\x16\x12\xe9\x02\x02\x8a\x7b\xb6\xe9\xf4\x5e\xc9\xf7\xc0\x34\x0b\x6a\xf3\x67\xcf\x8d\xc1\x85\x58\x9b\xb4\x9d\xc5\xf9\x40\xf9\x5b\x47\xf9\xcf\xf7\xff\x7f\x37\x9a\x49\x49\xb3\xcc\x20\x13\x25\xe0\x50\xd2\xc6\x3b\x88\xfb\x3d\xb6\x0e\x15\xb8\xbb\x4e\x2e\xe0\xbe\xc4\xa5\x1a\x80\x4d\x71\x96\x16\xff\x7e\x78\xeb\x36\xa8\x9d\xdf\xa5\xf8\x73\xcd\x2e\xf5\x3b\xb4\xc0\xd4\xb4\x49\xec\x97\x30\x29\xb9\xcd\xf4\xa7\x93\xa4\x4a\xb4\x53\xa2\xb6\xe0\xa6\xb6\x7c\x75\x8e\x7d\x20\xa7\xed\x42\xf3\xfc\x6e\x34\x3d\x3d\xcd\xda\x1b\x69\x53\xa0\x02\xb9\x4c\x24\x0a\x90\xe2\x5b\x64\xaa\x6f\xa1\xc1\x2e\x98\xe5\xe9\x1c\x89\x7c\x2c\x44\xe8\x2e\xd5\x86\x5a\xcb\x68\x5f\x4c\xe3\xbd\x65\x2d\xe6\x07\xbf\x2b\xa7\x11\xc6\xe2\x76\x73\x15\x5e\x74\x23\xb4\xe4\x38\x47\xa2\xc4\x65\x59\xb9\x35\x04\xf9\xd0\x84\x6e\x09\x82\x07\x9e\xdf\x62\x9e\xff\xc7\x77\xd5\x73\x67\x55\x20\x2d\xdf\x49\x6f\x5d\x17\xdd\x74\x27\xb4\xf4\x42\x45\x8a\xd6\xce\x74\xc6\xab\x8d\xec\x46\x0b\xb1\xc1\x3e\x7b\xfd\xfd\xd1\xfb\xc3\x49\x5f\x0e\x93\xc8\x36\x08\x8d\x7b\x70\x00\x96\x65\x27\x49\xc3\xe5\xd4\x52\x44\x27\xe1\xfe\xf6\x14\x13\x34\xa8\x78\xed\x06\xca\x96\x05\x76\x47\x17\xbc\x95\x1d\x2b\x8c\x2f\x79\x2b\xab\x87\x90\xff\x24\x5a\xcf\x6e\x6c\xb4\x40\xd6\x48\x35\x58\x05\xe2\xb1\x1c\xdf\x32\xdd\x37\xcc\xfa\x1d\xf1\xda\xd8\xa4\xc5\x9c\x9a\xd1\x85\x2b\xf1\x99\x99\x46\xf1\x75\xce\xc5\x25\xfb\x54\x6d\x0d\x16\xee\x57\x03\xcc\x26\x88\x73\xa1\x9b\x09\xdc\x7c\xae\x4b\x31\x55\xf0\x85\xd9\xad\x3e\x6f\x49\xd5\xf5\x3d\x5d\xda\xdc\x77\x9d\xa7\xe8\x39\x56\x27\x60\x90\x6b\x23\x96\xb5\x5c\xf3\x35\x3b\x97\x56\xde\xc3\x01\xce\x7a\xe4\xc7\x6a\x3e\x7d\x76\x68\xca\x66\xa7\x3e\xb0\x01\x82\x72\x79\x1f\xcd\xd4\xb3\xf8\x8e\xe5\x26\x45\x55\x1b\xc0\x21\x47\x14\x54\x39\x32\xfc\x4a\x40\xf2\x76\xb9\xd3\x52\x59\x1c\xa0\xa9\x31\x60\xc2\x5c\x66\xbb\xf0\xac\x32\x98\x4b\x25\x73\x97\x57\x07\xa7\xbb\x93\xb0\x8c\x26\xbd\xb0\xbc\x9d\xc3\x5d\x73\x64\x09\xee\xf7\x6c\xe8\x17\x9a\x83\x4e\xfe\x88\x37\xe1\x65\xd3\x57\x61\xda\xdf\x6f\x42\xb5\xbf\x0c\x55\xb8\xdc\x9e\xc3\x15\x46\x17\x20\x6b\x36\x36\x83\xf8\x8f\xdd\x8a\x47\x67\xa3\x10\x52\xb8\xab\x89\x0b\x00\x37\xd2\xa2\x91\x6c\x2f\xa4\x2a\x95\xca\xb2\xa1\xdf\x19\x9b\x4a\x9a\x96\x02\xc8\xea\xe1\x4a\x32\x97\x19\x33\x7e\xd7\xec\x8c\x12\xc2\xc5\x4d\x8a\x06\x2f\x80\x67\xcc\x11\xfa\x51\xa6\xe0\xec\xa7\x63\x20\xcb\x2c\xe6\xa8\x6c\xbb\x62\xca\xd1\xf8\xee\x28\xdc\xbf\x8c\x8d\xf8\xe3\x0c\x98\xb5\x46\xf6\x9d\x45\x82\x0e\x70\x9d\xb9\x5c\xd5\xa5\x18\xe7\xda\x29\xbb\x57\xb1\xf7\x56\x1b\xc0\x21\xcb\x8b\x0c\xdb\x20\x15\x84\x17\x01\xa3\xf0\x1a\x89\xd7\xbe\x65\xc8\xaa\xca\x14\x3b\x22\x06\x8e\xd0\xcc\x9c\xba\x64\x99\x09\x27\x72\x10\xb9\xcc\xcb\xcb\xee\x4e\x65\xfa\xf2\xf2\x92\x3e\x67\x35\x30\xd1\x04\x64\xf2\x0a\xa1\x95\x97\xff\x6e\xd5\xc5\xab\xda\xe7\xf3\x31\x00\xce\x14\xb0\x8c\x34\xf4\x31\x9e\xee\x28\x40\xfb\x7a\xcc\xc2\xe3\x8c\x41\xd2\xce\x70\xfc\x32\xc0\xe4\xfa\x93\xcc\x20\xc8\x58\x1f\x33\x0c\x97\x47\x97\x89\xd6\x07\x7d\x66\x2e\xdb\x0b\xd1\x55\xf5\x2f\x82\x3a\xed\x5d\x61\x09\x07\xd0\x4a\xb4\x6e\x01\x53\xa2\x51\xe6\x9a\x65\x0e\xbd\x54\x9f\x99\x05\xfb\xf1\x2e\xc6\xb4\x9a\x72\xaa\x65\x3d\x83\x5f\x4b\x81\xa2\x0d\xda\x80\x8c\x32\xd1\xa2\x24\xc0\xbc\xb0\x65\xdb\x8f\x55\x1b\xf2\xb9\x08\xdb\x94\xd9\x30\xe2\x03\x04\x29\x23\xdf\xcf\xe7\x92\xc8\x3f\x68\x59\x0d\x84\xbe\x2f\xce\x32\xe8\x57\xa3\x1f\x09\x01\xc5\xde\x7a\xe4\x3c\x7a\xf5\x34\x5b\xcf\xa3\xe1\x0d\x16\x74\x8c\x7c\xbf\xdc\x40\x49\x8f\x4d\xaf\x5a\xd5\x7d\x67\xd7\xae\xec\xaf\xad\xe9\x49\xb4\xc3\x74\xcc\xec\x71\x41\xae\x58\xb6\x8c\xf8\xdd\xf9\x79\x62\xbe\x6c\x6d\xb8\x60\x4a\x5c\x40\x22\x0d\x59\x58\xcf\x99\x76\xd4\xea\x2d\xf5\xed\xfe\x6a\x47\x69\xc0\xa1\x7f\xac\x90\x36\x82\x89\xf4\x17\x6a\x63\x4c\x49\x6b\x16\x44\x7c\xb3\x3a\x5b\x0f\x71\xf4\x7e\xcb\xc1\x05\xff\x08\x18\x70\x9d\xe7\x6c\x97\xd0\xef\x88\x67\xce\xf1\xff\x8f\xc4\x55\x7d\xfc\xfa\xd8\x50\xe0\x00\x6f\xa3\x80\x4e\x3c\x95\xed\x92\x35\x8e\x5b\x67\xbc\x4d\x15\xba\xb8\xd0\x00\x93\x8f\x12\xbc\x98\xcc\xbe\xdc\x7b\x11\x0c\xbf\x04\xa5\x6d\x78\x1e\xab\x9a\x7c\x41\x76\x2c\xf6\x14\x72\x64\x8a\x42\xce\x04\x8d\x60\x12\x26\x86\x2a\x5a\x47\x31\xe1\xbb\x31\xfb\x19\x4f\xe1\xac\xc2\xad\x1e\xc1\x00\x2d\x48\xd1\x86\xd4\x60\xd2\x86\x22\x63\xea\xb1\x14\xc1\x4f\xff\x00\xf9\x24\x7c\x8b\x14\x0c\x8f\x27\x0b\xd2\x93\x99\xec\xab\xfc\xd2\x3c\x0f\x46\xeb\x07\xc5\xee\xee\x34\xad\xa2\x89\x03\x29\xda\x61\x51\xbf\xe6\x9e\x14\xf1\xaf\x5f\xb4\x3d\xa2\xfc\xa7\x75\x2d\xb4\x3c\x3d\x0e\x33\x07\xb5\x66\xb7\xee\xc0\xe2\x64\xfa\x2b\x00\x00\xff\xff\xd4\xf8\x02\xbf\x74\x24\x00\x00")

func openapiKindnamesYamlBytes() ([]byte, error) {
	return bindataRead(
		_openapiKindnamesYaml,
		"openapi.kindnames.yaml",
	)
}

func openapiKindnamesYaml() (*asset, error) {
	bytes, err := openapiKindnamesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openapi.kindnames.yaml", size: 9332, mode: os.FileMode(420), modTime: time.Unix(1714147574, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _openapiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdd\x73\x1b\xb7\x11\x7f\xe7\x5f\xb1\x33\x6e\x87\x76\x86\x9f\x4d\x3a\xd3\xde\xd8\x99\x91\x63\xbb\x49\x6a\x5b\xae\x29\x37\x0f\x9d\x8e\xb4\x04\xf6\x78\x88\xef\x80\x33\x80\x93\x44\xb7\xd5\xdf\xde\x01\x70\x9f\xe4\x91\xa2\x14\x3b\x52\x32\x7e\x92\x0e\xb7\xbb\xd8\xcf\xdf\x2e\x70\x54\x39\x49\xcc\x45\x04\x5f\x4f\x66\x93\xd9\x40\xc8\x58\x45\x03\x00\x2b\x6c\x4a\x11\xe8\x64\x6c\x35\x5d\xc2\x82\xf4\xb9\x60\x04\x47\x6f\x7e\x18\x00\x70\x32\x4c\x8b\xdc\x0a\x25\x77\x91\x9c\x93\x36\xfe\xf5\x6c\x32\x9b\xcc\x07\x86\xb4\x5b\x71\x92\xc7\x50\xe8\x34\x82\xc4\xda\x3c\x9a\x4e\x53\xc5\x30\x4d\x94\xb1\xd1\x5f\x66\xb3\xd9\x00\x60\x43\x3a\x2b\xb4\x26\x69\x81\xab\x0c\x85\xec\xb2\x9b\x68\x3a\xc5\x5c\x4c\x9c\x09\x26\x11\xb1\x9d\x30\x95\x6d\x8b\x78\x85\x42\xc2\xc3\x5c\x2b\x5e\x30\xb7\xf2\x08\x82\x36\xfd\xc2\x8c\xc5\x15\x5d\x27\x72\x61\x71\x25\xe4\xaa\x12\x94\xa3\x4d\xbc\x6d\x4e\xc2\xb4\x74\xc8\xf4\x7c\x3e\xe5\x42\x2a\x83\x45\x30\x1c\x60\x45\x36\xfc\x03\x60\x8a\x2c\x43\xbd\x8e\xe0\x2d\xd9\x42\x4b\x03\x08\xa9\x30\x16\x54\x0c\x35\x53\x45\x4a\xac\xd0\xc2\xae\x2b\x56\xa7\xf6\x53\x42\x4d\x3a\x82\x7f\xfd\xbb\x5c\xd4\x64\x72\x25\x0d\x99\x86\x6a\xf8\xa7\xd9\x6c\xd8\x3c\x6e\x98\x70\x04\x3f\x2e\x8e\x5f\x03\x6a\x8d\xeb\xf6\xae\xa0\x96\x3f\x13\xb3\xa6\xc5\xc7\x94\xb4\x24\x6d\x5b\x14\x00\xe6\x79\x2a\x18\x3a\x61\xd3\x9f\x8d\x92\xdd\xb7\x00\x86\x25\x94\xe1\xe6\x2a\xc0\x1f\x34\xc5\x11\x0c\x1f\x4c\x99\xca\x72\x25\x49\x5a\x33\x0d\xb4\x66\xfa\xac\xd4\xe1\xa5\x30\x76\xd8\xd8\xf1\xcd\x6c\xbe\xc7\x8e\xc2\x26\x60\xd5\x7b\x92\x20\x0c\x08\x79\x8e\xa9\xe0\x77\xa1\xfc\x73\xad\x95\xee\x68\xfd\xf5\x6e\xad\xdf\x49\x2c\x6c\xa2\xb4\xf8\x48\x1c\xac\x82\x9c\x74\xac\x74\x06\x2a\x27\xed\xd5\xba\x0f\x16\xfc\x79\x5f\xfe\xbc\x93\x74\x99\x13\xb3\xc4\x81\x1c\x1f\x28\xe6\x6b\xf5\xee\x7d\x9f\xa3\xc6\x8c\x2c\xe9\xba\x16\xc6\xbd\xcc\x0d\xdd\x34\xc7\x15\x0d\x0f\x25\x36\xe2\xe3\x0d\x88\x09\x35\x4b\x0e\x26\x57\x9a\x93\x7e\xba\x3e\x98\x3e\x16\x94\x72\x13\xc8\x73\x87\xa2\x9b\xf0\xf2\x9d\x26\xb4\x04\x08\x92\x2e\xea\x1a\xbf\x19\xb0\x7c\x28\xc8\xd8\xa7\x8a\xb7\xe8\x3a\x99\x50\x55\x2d\x70\xb4\x58\x93\x38\x3e\xa1\x89\x47\x60\x75\x41\x83\x3d\x29\xb1\x3f\x21\xfa\xd3\xe1\x10\x14\x19\xee\x85\xc6\x3d\x90\x12\x7c\x76\x27\x89\xbc\xa9\xbb\xc7\x91\x3d\x55\xf8\x4f\x87\x76\x5e\x85\x50\x85\xe6\xfe\x94\xe1\x17\xe0\xbe\x43\x0b\xfe\xba\xdb\x82\xba\x5c\x31\xd5\x84\x7c\x0d\x74\x29\xcc\xdd\xf4\xfb\x1b\x35\x9c\x23\x09\xc5\xae\x9e\x03\xcc\x95\xac\x9b\xc8\x6c\x42\x9b\x30\x77\x37\x26\xed\x1c\x05\xa7\xff\x11\xfc\x7f\xbb\xe7\xc1\xbf\x91\x05\x94\xcd\x38\xb6\x5c\x43\x5d\x16\x9f\x67\x12\xac\x13\x22\x56\x85\xe4\x9d\x0d\x7f\x55\xd7\xf5\x62\xdf\x17\x00\xb9\x1b\x0b\xbe\xd9\x6d\xc1\x6b\xd5\x64\xe7\x85\xb0\x09\x98\x9c\x98\x88\x05\x71\x10\xfc\xb7\x82\x26\xf7\x75\x7c\xcd\xd1\xb2\x64\x0b\x14\xde\xe5\xdc\x4f\x71\xf2\x33\x8d\x70\x41\x3e\x6f\xe2\x7a\xcf\x46\xb9\x37\xce\x2b\x6f\x83\x19\xfb\xc7\xba\x43\x70\xae\x28\xad\x35\x05\x63\x64\x4c\x5c\xa4\xe9\xfa\xde\x00\xde\x97\x61\xef\x57\xd6\xfa\x0b\x56\xdf\x0b\x23\x7e\x87\x13\xeb\x56\x8f\xf1\xc0\xe3\xa6\xd4\x7b\x31\xa1\x6e\xdf\x94\x5c\x7b\xdd\x20\x78\xdf\x68\xfb\x5e\x48\x2e\x31\xab\x90\xb8\x94\x51\x5e\x2c\x4f\xea\xb7\x93\x35\x66\xe9\x83\xa9\xbf\x2c\x9d\x5e\xcd\x31\x17\x57\xf3\x52\xca\xd5\xfc\x7c\x7e\x35\xaf\x29\xf7\x6e\xd2\x9a\x9f\x7f\xf9\x4e\x57\x73\x27\xcd\xed\xf7\x00\x8e\xde\x9d\x1c\x8f\x8f\x9e\x3d\x83\xd7\xcf\x7f\x82\x37\x47\x27\xdf\x2f\x06\x8d\x17\xdc\x86\x55\xb3\x5d\x38\x4f\x56\xd6\x96\xdd\xb6\x0c\x81\x5d\xe7\x14\xee\x93\x07\xad\x08\x51\x04\x4b\x4f\x56\x2e\x86\x87\x17\x4a\x67\x68\x23\xf8\xf1\xa7\x93\x41\x15\xca\x52\xe8\xb1\xbf\x83\x7d\x4b\x31\x69\x92\x8c\xba\xd2\xc3\x05\x6d\xb9\x94\x6b\x07\x46\x56\xb4\xdb\xa0\xe0\xed\x8c\x08\x4c\xc6\x6a\x21\x57\xf5\xb2\x73\xc0\xb5\x44\x89\x73\xef\x75\x44\x2c\x5c\x96\x9c\xa2\xbd\x96\x14\x20\x2e\x4d\x76\xfd\x77\x6c\x45\xd6\x0c\x13\x65\x4f\xfe\x25\x62\x5e\x8a\xe6\xfe\xeb\x40\x4f\x1d\xe4\x86\x1c\x57\xb4\x4d\x24\xa4\xa5\x15\x35\x15\x6c\xc4\xc7\x03\xa8\xac\xb2\x98\x5e\x47\x56\xcf\x5b\xad\xa1\xce\x69\xda\x7a\x74\x3a\xb5\x1e\xdd\xe6\xad\x47\xbf\x4b\xeb\x59\x58\xca\x02\x5c\xfa\xe2\xaf\xe4\x62\x9a\x1e\xc7\xfb\xef\x48\x2b\xd0\xd8\x48\xc8\xe6\x7e\xb2\xc7\xd1\xfd\xae\x76\x08\xc7\xa9\x0b\x55\x3b\xc2\xab\x09\xb7\xb0\x6e\x07\x69\xdd\x89\x4f\xbb\x49\xdf\xc3\xe0\x4d\x6f\xe7\xc8\x0d\xcc\x6f\x7f\x90\xb8\x91\xcd\xde\xf3\x7d\x8a\xf9\xef\x2e\x9d\xf5\x1e\xd2\x83\x81\xbc\xea\x90\x77\x14\x59\x3f\x54\x50\xaf\x9d\x5b\x11\xeb\xc7\x8b\x9d\xe4\xfb\x30\x63\x17\x6a\xdc\x58\x58\xfb\xbb\xd3\xef\x25\x3b\xba\x87\x8b\xbe\x83\xd4\x0d\xb1\xb2\x27\xc8\x5b\x6e\xfe\xbb\x90\xfc\x35\x66\x75\x99\x5f\xd3\xa0\x7b\xd4\xae\x24\x0c\x3b\xf2\xda\x81\xb9\xbd\xcc\x26\x4e\xd5\x4a\x9f\x3b\x6e\x2f\x7f\xfb\x94\xba\x31\x54\x2c\xbe\xfb\xfe\xf9\xab\xa3\xc5\x60\x7b\xf2\x6a\xd0\xcb\xed\x15\x35\x37\x70\x42\x46\xe0\xe6\x98\xf2\xb1\x33\x5f\x9e\x24\xe4\xa6\x78\x15\x83\x26\xa6\x34\xdf\x6c\x1f\xed\xe3\xfa\xe6\xa4\xb8\x15\xba\x76\x97\x0b\x3a\xb4\x7a\x8c\xd3\xe2\x43\x41\x7a\xdd\xa7\xc6\x1b\x5c\x11\xc8\x22\x5b\x92\x6e\x74\x09\x5f\xb3\x2f\x12\x92\x9d\x05\xba\x64\x44\xdc\xb4\x8e\x21\x6e\x97\x76\xff\xea\x57\x74\xb3\x8f\x72\x8a\xb1\x48\x6d\x04\xf3\x7a\x29\x13\x52\x64\x45\xd6\x2c\x35\x7e\x88\x31\x35\x41\x7e\xbb\x4b\x07\x2b\x5b\x5b\xef\xb5\xf2\x15\x5e\x3a\xf1\x5b\x86\x1a\x77\x30\xd4\xfe\x23\xfe\x2d\x2d\x28\x7f\xf6\xd0\xb1\x61\xb6\xcf\x06\xff\x49\x71\xc3\x0a\xbf\xb6\xc3\x8e\x3e\x21\x1b\xd6\xfd\x77\x5c\xeb\xb0\x28\x43\x63\xfc\x5d\x7a\x10\x0c\x4c\x0b\x4b\x5a\xe0\xc4\x27\x9d\x59\x4b\x8b\x97\xce\x07\x36\x11\xa6\x49\x66\x10\xa6\x35\x0f\x65\x22\x45\xed\xbc\x63\x37\x58\x08\x4e\x2f\x12\xd2\x74\x0a\x2c\xc5\xc2\x90\x5b\x45\x09\x8b\x7f\xbc\x04\x63\xd1\x52\x46\xd2\x8e\x9a\xc9\xd0\x54\xf7\xfa\xbe\x0c\x2b\x11\xee\x38\x04\x68\xad\x16\xcb\xc2\x92\x81\x29\x30\x95\x16\x99\xec\x52\x21\x63\xaa\x90\x76\x02\xb5\xb8\x17\x4a\x03\x5d\x62\x96\xa7\x34\x02\x21\xc1\x7f\x71\x2d\x63\xa8\x05\x9d\x93\x43\xfe\x36\xaf\x09\x07\x67\x84\xc2\x90\x76\xc2\x1b\x13\x2d\x6a\x7f\x9c\xf3\x04\x67\xd9\xfa\x2c\x1a\xd4\x2f\xcf\xce\xce\xcc\x87\xb4\x65\x45\x60\x86\x54\xbc\x27\x18\x66\xeb\x3f\x0e\xdb\xa4\x0d\xdf\xc9\xb6\xd3\x81\xa1\x04\x4c\x8d\x82\x25\x85\x23\x21\x71\x50\xae\xb0\x52\x7f\x8f\xa5\xc9\xa8\x42\x33\x9a\xdc\xc2\x48\x53\x2c\xeb\x34\x30\x90\xe2\x92\x52\xf2\xdf\x00\xce\x62\xa5\x9e\x2c\x51\x9f\x8d\x76\xda\xd4\xe6\x3d\xf5\xac\x66\xf2\x9e\xd6\xf0\x04\x86\xb1\x52\x43\x40\xc9\x7b\x69\xce\x31\x2d\xc8\x51\x2d\x51\xef\xf0\xc2\x0f\x21\x7c\xed\xcc\x92\x43\xeb\xfa\xd2\xb9\xe0\xc4\x47\xa0\x34\x88\x40\x13\xa4\x09\x03\x94\xe5\x76\x3d\x72\x6b\xcd\xbd\xcc\x56\x2c\x6d\x82\xd6\xaf\xb8\x80\x40\x82\x06\x72\xd2\x99\x30\x46\x28\xe9\x1c\x64\x88\xe0\x42\xa4\x29\x2c\x9b\x38\x87\xea\x26\x3e\x39\x14\x4b\xcb\xaf\xf8\xdd\x12\x2d\x17\x3f\x43\x8d\x86\xe8\x2e\xd7\x9f\xbc\x4a\x2b\xc1\x87\x15\xea\xb2\xb0\x37\x2e\xd6\x8d\x32\xbd\x61\x02\xd7\x51\xf5\xaf\x43\xde\x56\x85\x76\x40\x29\xa2\x61\xfd\xd9\x77\xac\x6f\xb7\x27\x9c\xa2\xe4\xa7\x10\x0b\x6d\x2c\x1c\xae\xc4\x28\x70\xbc\xde\xab\xd3\xa7\xaa\x08\xa9\x80\x2e\xf3\x54\x30\x61\x83\x09\x01\xc0\x7c\xc6\x57\xe0\x72\x70\xa2\x87\x9f\x9f\x74\xf3\x3c\xac\x7d\x9a\x34\x2f\xbc\x3e\x06\x10\x98\xca\x32\x1c\x1b\x72\xf6\x3b\xcc\xab\x7e\x2c\x17\x76\x73\x51\x5a\xd2\x56\xa1\x02\xbc\x08\xaf\x55\xec\x80\x68\x6c\xac\x2e\x98\x2d\xb4\x93\x28\xfd\xe0\xe4\x07\x6d\xe3\xa2\x01\x8f\xeb\xb7\xdf\x4e\x1e\x7b\xb1\xdf\x82\x54\xd6\x9f\x2e\x1b\x81\x8f\x8d\xad\x88\xbe\x82\x8c\x50\x1a\x9f\x15\x9e\xde\x0b\x84\x5a\x4c\xcd\xf3\x3c\x24\x72\x14\xb2\x1a\x59\x02\x8b\x16\x2a\x3a\xdd\x57\x64\x41\xf0\x91\xbf\x71\x19\x41\x9e\xa2\x7c\x28\xb8\xd7\xd1\x8d\x9f\x8f\xfc\x7f\x01\x3c\xe1\x61\xbd\x9d\x79\xd4\xc9\xae\xfa\x7f\xc5\x32\x2f\xb0\x0b\xed\xe3\x71\x93\x3a\x81\xfd\x89\xe0\x23\xbf\xa1\xdb\x6f\x22\x78\xf8\xeb\x36\x1c\x95\x40\xfd\x55\x97\x8b\x2c\x4b\x5e\xfa\x37\x4f\x3a\x1f\x82\x9a\xcd\xf7\x26\xcc\xff\x03\x00\x00\xff\xff\x36\xc1\x92\x1a\x6a\x2a\x00\x00")

func openapiYamlBytes() ([]byte, error) {
	return bindataRead(
		_openapiYaml,
		"openapi.yaml",
	)
}

func openapiYaml() (*asset, error) {
	bytes, err := openapiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openapi.yaml", size: 10858, mode: os.FileMode(420), modTime: time.Unix(1714147574, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"openapi.kindnames.yaml": openapiKindnamesYaml,
	"openapi.yaml":           openapiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"openapi.kindnames.yaml": &bintree{openapiKindnamesYaml, map[string]*bintree{}},
	"openapi.yaml":           &bintree{openapiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
